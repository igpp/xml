<!--
   Standard build targets for projects.

   The file system pattern for a project follows Ant conventions 
   and contains the following sub-directories:
   
      Target   Description
      ======   ===========
      build    clean the current build and build the "jar" target.
      release  clean the current build and build the "dist" and "local" target.
      local    copies generated jar files into the local release area.
               Copies jar files to ${release.local} and ${release.jar}
               Copies distribution zip file to ${release.dist}
      publish  copies all project files to the ${release.host}

      clean    remove all contents of the build and dist area.
      jar      compile all source code and create jar file.
               which is placed in: ${jar.dir}/${package.name}-${version}.jar

      bin      create a directory containing all scripts and jar files
               for a standalone environment. Performed only if a "bin" 
               directory exists.
      dist     builds the jar, api and kit targets and assembles a zip file
               at: ${dist.dir}/${package.name}-${version}-dist.zip
      kit      builds the bin, jar at: ${build.dir}/bin
      api      builds the API documentation for the project and places
               it in: ${api.dir}
      
   Directories:
      bin      common binaries, scripts. (optional). If a bin directory is present then a kit can 
               be constructed that contains the bin commands and all the necessary jar files.
      build    This area where compiled content is placed. Ant creates it and can empty it in the 'clean' project.
      dist     Distribution outputs go in here; the directory is created by Ant and clean empties it out
      doc      Hand crafted documentation (optional)
      lib      Imported Java libraries go in to this directory
      src      source goes in under this tree in a hierarchy which matches the package names.
               The dependency rules of <javac> requires this.
      tutorial Hand crafted tutorials (optional)
      example  Usage examples. (optional)
      conf     Configuration information (optional)
      xsd      XML schema documents (optional)
      project  General information about the project including readme and license information.
      
   The project specific properties are defined in the file "project.xml" co-located with this file.
-->
<project name="build-base" basedir=".." default="build">
    <!-- Project specific properties-->
    <import file="project.xml"/>
    
    <!-- General project pattern -->
    <property name="project.dir"  value="project"/>
    <property name="src.dir"      value="src"/>
    <property name="lib.dir"      value="lib"/>
    <property name="doc.dir"      value="doc"/>
    <property name="bin.dir"      value="bin"/>
    <property name="tutorial.dir" value="tutorial"/>
    <property name="example.dir"  value="example"/>
    <property name="xsd.dir"      value="xsd"/>
    <property name="conf.dir"     value="conf"/>
    <property name="build.dir"    value="build"/>
    <property name="dist.dir"     value="dist"/>
    
    <property name="classes.dir"  value="${build.dir}/classes"/>
    <property name="jar.dir"      value="${build.dir}/jar"/>
    <property name="war.dir"      value="${build.dir}/war"/>
    <property name="api.dir"      value="${build.dir}/api"/>
    <property name="kit.dir"      value="${build.dir}/bin"/>
    <property name="report.dir"   value="${build.dir}/junitreport"/>

	
    <!-- Load the ant contrib lib -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
       <classpath>
          <pathelement location="${basedir}/ant-lib/ant-contrib/ant-contrib-1.0b3.jar"/>
       </classpath>
    </taskdef>

    <!-- Where to look for local jar dependencies. Used when running tests -->
    <path id="classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar" erroronmissingdir="false" />
        <fileset dir="${release.local}" includes="**/*.jar" erroronmissingdir="false" />
    </path>
    <!-- Convenient targets -->
    <target name="build">
       <echo message="Settings:"/>
       <echo message="   Version: ${version}"/>
       <echo message="   Package name: ${package.name}"/>
       <echo message="   Build destination: ${build.dir}"/>
       <echo message="Targets:"/>
       <echo message="   clean: Remove all temporary files."/>
       <echo message="   compile: Generate byte codes from source. Places results in ${classes.dir}"/>
       <echo message="   jar: Compile source and create jar file. Depends on: compile"/>
       <echo message="   war: Compile source and create war file. Depends on: compile"/>
       <echo message="   bin: Build command-line utilities."/>
       <echo message="   kit: Build a self-contained executable folder. "/>
       <echo message="   api: Create the API documentation."/>
       <echo message="   doc: Create printable documentation."/>
       <echo message="   dist: Build a distribution kit which contains everything. Depends on: jar,api,kit"/>
       <echo message="   run: Run the executable jar file to test the packaging. Depends on: jar"/>
       <echo message="   junit: Perform JUnit testing. Depends on: jar"/>
       <echo message="   publish: Copy files to release website (${release.host})"/>
    </target>
    
    <!-- Remove current build - start fresh -->
    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>

    <!-- Compile source code -->
    <target name="compile">
        <mkdir dir="${classes.dir}"/>
        <javac includeantruntime="true" srcdir="${src.dir}" destdir="${classes.dir}" extdirs="${release.jar}" />
    </target>

    <!-- Create jar file for classes -->
    <target name="jar" depends="compile">
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${package.name}-${version}.jar">
         <fileset dir="${build.dir}/classes" />
            <!-- Add contents of jar files to make stand-alone executable -->
            <!-- Zip file example
            <zipfileset src="${lib.dir}/commons-cli-1.2.jar" includes="**/*.class"/>
            -->
            <!-- Manifest to make executable -->
            <manifest>
                <!-- Make an executable jar - run main-class -->
                <attribute name="Main-Class" value="${main-class}"/>
                <!-- Who is building this jar? -->
                <attribute name="Built-By" value="${user.name}"/>
                <!-- Information about the program itself -->
                <attribute name="Implementation-Vendor" value="${package.vendor}"/>
                <attribute name="Implementation-Title" value="${pacakage.title}"/>
                <attribute name="Implementation-Version" value="${version}"/>
            </manifest>
        </jar>
    </target>

    <!-- Create war file for classes -->
    <target name="war" depends="jar">
        <mkdir dir="${war.dir}"/>
        <war destfile="${war.dir}/${package.name}-${version}.war" webxml="html/WEB-INF/web.xml">
           <fileset dir="html"/>
           <lib dir="lib"></lib>
           <lib dir="build/jar"></lib>
           <!-- To include other files
           <zipfileset dir="src/graphics/images/gifs"
                       prefix="images"/>
           -->
        </war>
    </target>

   <!-- Check if "bin" directory exists and set property for the "bin" target -->
   <target name="bin.check">
      <available file="${bin.dir}" type="dir" property="bin.run" />
	</target>

    <!-- Construct a self-contained "bin" directory for command-line tools -->
    <target name="kit" depends="bin.check" if="bin.run" >
        <mkdir dir="${kit.dir}"/>
    	<delete dir="${kit.dir}/jar"/>
        <mkdir dir="${kit.dir}/jar"/>
        <copy todir="${kit.dir}">
           <fileset dir="${bin.dir}"/>
        </copy>
        <copy todir="${kit.dir}/jar">
           <fileset file="${jar.dir}/${package.name}-${version}.jar" />
        </copy>
        <copy todir="${kit.dir}/jar">
           <fileset dir="${lib.dir}" erroronmissingdir="false" />
        </copy>
    </target>
    
    <!-- Build a distribution kit which contains everything -->
    <target name="dist" depends="jar,api,doc,kit">
        <mkdir dir="${dist.dir}"/>
        <zip destfile="${dist.dir}/${package.name}-${version}.zip">
            <zipfileset dir="${jar.dir}" prefix="${package.name}-${version}/lib" includes="**/${package.name}-${version}.jar" excludes="**/*-javadoc.jar"  />    <!-- Merge with all lib files -->
            <zipfileset dir="${api.dir}" prefix="${package.name}-${version}/doc/api" />
            <zipfileset dir="${lib.dir}" prefix="${package.name}-${version}/lib" excludes="**/*-javadoc.jar" erroronmissingdir="false" />
            <zipfileset dir="${kit.dir}" prefix="${package.name}-${version}/bin" erroronmissingdir="false" />
            <zipfileset dir="${project.dir}" prefix="${package.name}-${version}" includes="LICENSE.TXT" erroronmissingdir="false" />
            <zipfileset dir="${project.dir}" prefix="${package.name}-${version}" includes="README.TXT" erroronmissingdir="false" />
            <zipfileset dir="${doc.dir}" prefix="${package.name}-${version}/doc" includes="**/*.pdf" erroronmissingdir="false" />
            <zipfileset dir="${build.dir}/doc" prefix="${package.name}-${version}/doc" includes="**" erroronmissingdir="false" />
            <zipfileset dir="${tutorial.dir}" prefix="${package.name}-${version}/tutorial" includes="**/*.pdf" erroronmissingdir="false" />
            <zipfileset dir="${example.dir}" prefix="${package.name}-${version}/example" erroronmissingdir="false" />
            <zipfileset dir="${xsd.dir}" prefix="${package.name}-${version}/xsd" erroronmissingdir="false" />
            <zipfileset dir="${conf.dir}" prefix="${package.name}-${version}/conf" erroronmissingdir="false" />
        </zip>
        <copy todir="${dist.dir}">
            <fileset dir="${build.dir}/doc" includes="**"  erroronmissingdir="false" />
        </copy>
        <mkdir dir="${dist.dir}/api"/>
        <copy todir="${dist.dir}/api">
            <fileset dir="${build.dir}/api" includes="**"  erroronmissingdir="false" />
        </copy>
        <copy todir="${dist.dir}/doc">
            <fileset dir="${build.dir}/doc" includes="**"  erroronmissingdir="false" />
        </copy>
    </target>

    <!-- Create the API documentation -->
    <target name="api">
        <mkdir dir="${api.dir}"/>
        <javadoc
           destdir="${api.dir}"
           author="true"
           version="true"
           use="true"
           windowtitle="${package.title}">

           <fileset dir="${src.dir}" defaultexcludes="yes">
              <include name="**/*.java" />
           </fileset>

           <doctitle><![CDATA[<h1>${package.title}</h1>]]></doctitle>
           <bottom><![CDATA[<i>${copyright}</i>]]></bottom>
           <link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
         </javadoc>
         
        <!-- Build jar file containing javadoc --> 
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${package.name}-${version}-javadoc.jar">
            <fileset dir="${api.dir}" />
            <manifest> 
                <!-- Who is building this jar? -->
                <attribute name="Built-By" value="${user.name}"/>
                <!-- Information about the program itself -->
                <attribute name="Implementation-Vendor" value="${package.vendor}"/>
                <attribute name="Implementation-Title" value="${pacakage.title}"/>
                <attribute name="Implementation-Version" value="${version}"/>
            </manifest>
        </jar>
    </target>

 
    <target name="docgen">
	  <basename property="dir.name" file="${pathname}"/>
	  <echo message="Docgen Processing ${dir.name}" />
      <exec executable="\tools\igpp\docgen\bin\docgen.bat" dir="${doc.dir}/tools/${dir.name}">
          <arg value="-o" /> <arg value="${basedir}/${build.dir}/${doc.dir}/tools/${dir.name}/index.html"/>   <!-- Output -->
          <arg value="-f" /> <arg value="plain"/>  <!-- Output Format -->
          <arg value="package=${package.name}" /> <!-- Set variable "package" -->
          <arg value="base=${package.base}" /> <!-- Set variable "base" -->
          <arg value="version=${version}" /> <!-- Set variable "package" -->
          <arg value="command=${package.command}" /> <!-- Set variable "command" -->
          <arg value="host=${release.host}" /> <!-- Set variable "host" -->
          <arg value="home=${release.home}" /> <!-- Set variable "home" -->
          <arg value="index.html"/> <!-- Template -->
      </exec>
   </target>

   <!-- Create documentation -->
   <!-- Check if "doc" directory exists and set property for the "doc" target -->
   <target name="doc.check">
      <available file="${doc.dir}" type="dir" property="doc.run" />
   </target>
   
   <!-- Process document source files -->
   <target name="doc" depends="doc.check" if="doc.run">
      <mkdir dir="${build.dir}/doc"/>
      <!-- Create User's Guide -->
      <mkdir dir="${build.dir}/doc/guide"/>
      <exec executable="\tools\igpp\markdown\bin\md2pdf.bat" dir="${doc.dir}">
         <!-- <arg value="-t"/> --> <!-- Create TOC -->
         <arg value="-"/> <!-- Cover page -->
         <arg value="guide/${package.name}.md" /> <!-- Source Markdown file -->
         <arg value="../${build.dir}/doc/guide/${package.name}-${version}.pdf"/> <!-- Output -->
      </exec>
      <!-- Create Web pages -->
      <copy todir="${build.dir}/doc" >
         <fileset dir="${doc.dir}" includes="*.*" />
      </copy>
      <!-- Process and copy index.html to doc folder -->
      <exec executable="\tools\igpp\docgen\bin\docgen.bat" dir="${doc.dir}">
          <arg value="-o" /> <arg value="../${build.dir}/doc/index.html"/>   <!-- Output -->
          <arg value="-f" /> <arg value="html"/>  <!-- Output Format -->
          <arg value="package=${package.name}" /> <!-- Set variable "package" -->
          <arg value="base=${package.base}" /> <!-- Set variable "base" -->
          <arg value="version=${version}" /> <!-- Set variable "package" -->
          <arg value="command=${package.command}" /> <!-- Set variable "command" -->
          <arg value="host=${release.host}" /> <!-- Set variable "host" -->
          <arg value="home=${release.home}" /> <!-- Set variable "home" -->
          <arg value="index.html"/> <!-- Template -->
      </exec>
      <!-- Process and copy sidebar.js to doc folder -->
      <exec executable="\tools\igpp\docgen\bin\docgen.bat" dir="${doc.dir}">
          <arg value="-o" /> <arg value="../${build.dir}/doc/sidebar.js"/>   <!-- Output -->
          <arg value="-f" /> <arg value="plain"/>  <!-- Output Format -->
          <arg value="package=${package.name}" /> <!-- Set variable "package" -->
          <arg value="base=${package.base}" /> <!-- Set variable "base" -->
          <arg value="version=${version}" /> <!-- Set variable "package" -->
          <arg value="command=${package.command}" /> <!-- Set variable "command" -->
          <arg value="host=${release.host}" /> <!-- Set variable "host" -->
          <arg value="home=${release.home}" /> <!-- Set variable "home" -->
          <arg value="sidebar.js"/> <!-- Template -->
      </exec>
      <!-- Process and copy example folder -->
      <mkdir dir="${build.dir}/example"/>
      <copy todir="${build.dir}/example" >
         <fileset dir="${doc.dir}/example" includes="**"/>
      </copy>
      <exec executable="\tools\igpp\docgen\bin\docgen.bat" dir="${doc.dir}/example">
          <arg value="-o" /> <arg value="../../${build.dir}/example/index.html"/>   <!-- Output -->
          <arg value="-f" /> <arg value="plain"/>  <!-- Output Format -->
          <arg value="package=${package.name}" /> <!-- Set variable "package" -->
          <arg value="base=${package.base}" /> <!-- Set variable "base" -->
          <arg value="version=${version}" /> <!-- Set variable "package" -->
          <arg value="command=${package.command}" /> <!-- Set variable "command" -->
          <arg value="host=${release.host}" /> <!-- Set variable "host" -->
          <arg value="home=${release.home}" /> <!-- Set variable "home" -->
          <arg value="index.html"/> <!-- Template -->
      </exec>
      <!-- Process and copy index.html to doc/tools folder -->
     <mkdir dir="${build.dir}/doc/tools"/>
      <copy todir="${build.dir}/doc/tools" >
         <fileset dir="${doc.dir}/tools" includes="**"/>
      </copy>
      <exec executable="\tools\igpp\docgen\bin\docgen.bat" dir="${doc.dir}/tools">
          <arg value="-o" /> <arg value="../../${build.dir}/${doc.dir}/tools/index.html"/>   <!-- Output -->
          <arg value="-f" /> <arg value="plain"/>  <!-- Output Format -->
          <arg value="package=${package.name}" /> <!-- Set variable "package" -->
          <arg value="base=${package.base}" /> <!-- Set variable "base" -->
          <arg value="version=${version}" /> <!-- Set variable "package" -->
          <arg value="command=${package.command}" /> <!-- Set variable "command" -->
          <arg value="host=${release.host}" /> <!-- Set variable "host" -->
          <arg value="home=${release.home}" /> <!-- Set variable "home" -->
          <arg value="index.html"/> <!-- Template -->
      </exec>
	  
	  <foreach target="docgen" param="pathname">
	     <path>
	        <dirset dir="${doc.dir}/tools" includes="*" />
		 </path>
      </foreach>
  </target>
 
	<!-- Perform JUnit testing -->
    <target name="junit" depends="jar">
        <mkdir dir="${report.dir}" />
        <junit printsummary="yes">
            <classpath>
                <path refid="classpath" />
            </classpath>
            
            <formatter type="xml"/>
            
            <batchtest fork="yes" todir="${report.dir}">
                <fileset dir="${src.dir}" includes="*Test.java"/>
            </batchtest>
        </junit>
    </target>
    
    <!-- Format JUnit test results into an HTML report -->
    <target name="junitreport">
        <junitreport todir="${report.dir}">
            <fileset dir="${report.dir}" includes="TEST-*.xml"/>
            <report todir="${report.dir}"/>
        </junitreport>
    </target>
    
    <!-- Perform a clean build and copy files into the local system -->
    <target name="release" depends="clean,dist,local" />

    <!-- Copy files to the local file system -->
    <target name="local" >
        <copy todir="${release.jar}" file="${jar.dir}/${package.name}-${version}.jar" />
    </target>
    
    <!-- Copy files to the release web site -->
    <target name="publish" >
      <input message="Password for ${release.user}:" addproperty="release.password" />
      <echo message="${release.user}:${release.password}@${release.host}:${release.path}"/>

      <!-- Copy files -->
       <scp todir="${release.user}@${release.host}:${release.path}" password="${release.password}" >
          <fileset dir="${dist.dir}" includes="**"  />
       </scp>
    </target>
</project>
